@InProceedings{10.1007/978-3-540-87608-3_6,
author="Chaslot, Guillaume M. J. -B.
and Winands, Mark H. M.
and van den Herik, H. Jaap",
editor="van den Herik, H. Jaap
and Xu, Xinhe
and Ma, Zongmin
and Winands, Mark H. M.",
title="Parallel Monte-Carlo Tree Search",
booktitle="Computers and Games",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="60--71",
abstract="Monte-Carlo Tree Search (MCTS) is a new best-first search method that started a revolution in the field of Computer Go. Parallelizing MCTS is an important way to increase the strength of any Go program. In this article, we discuss three parallelization methods for MCTS: leaf parallelization, root parallelization, and tree parallelization. To be effective tree parallelization requires two techniques: adequately handling of (1) local mutexes and (2) virtual loss. Experiments in 13{\texttimes}13 Go reveal that in the program Mango root parallelization may lead to the best results for a specific time setting and specific program parameters. However, as soon as the selection mechanism is able to handle more adequately the balance of exploitation and exploration, tree parallelization should have attention too and could become a second choice for parallelizing MCTS. Preliminary experiments on the smaller 9{\texttimes}9 board provide promising prospects for tree parallelization.",
isbn="978-3-540-87608-3"
}



@ARTICLE{5654650,  author={Soejima, Yusuke and Kishimoto, Akihiro and Watanabe, Osamu},  journal={IEEE Transactions on Computational Intelligence and AI in Games},   title={Evaluating Root Parallelization in Go},   year={2010},  volume={2},  number={4},  pages={278-287},  doi={10.1109/TCIAIG.2010.2096427}}